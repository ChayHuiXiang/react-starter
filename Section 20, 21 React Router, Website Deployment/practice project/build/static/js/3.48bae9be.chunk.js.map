{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","getAllComments","loadedComments","data","params","useParams","useState","isAddingComment","setIsAddingComment","addCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuote","path","exact","to","url"],"mappings":"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","file":"static/js/3.48bae9be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__1MzyE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__Lr1wx\",\"loading\":\"NewCommentForm_loading__1H3z8\",\"control\":\"NewCommentForm_control__kZOT9\",\"actions\":\"NewCommentForm_actions__1Vnge\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__pLnKD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__1iKA-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__3t1RC\"};","import { useRef, useEffect } from 'react';\n\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const {sendRequest, status, error} = useHttp(addComment);\n\n  const {onAddedComment} = props;\n\n  useEffect(()=>{\n    if (status === 'completed' && !error){\n      onAddedComment();\n    }\n  },[status, error, onAddedComment]);\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    const enteredText = commentTextRef.current.value;\n\n    // optional: Could validate here\n\n    sendRequest({commentData: {text:enteredText}, quoteId: props.quoteId});\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && (\n        <div className='centered'>\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n  const params = useParams();\n  const [isAddingComment, setIsAddingComment] = useState(false);\n\n  useEffect(() => sendRequest(params.quoteId), [params.quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addCommentHandler = useCallback(\n    () => sendRequest(params.quoteId),\n    [params.quoteId, sendRequest]\n  );\n\n  let comments;\n\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  } else if (\n    status === \"completed\" &&\n    loadedComments &&\n    loadedComments.length > 0\n  ) {\n    comments = <CommentsList comments={loadedComments} />;\n  } else if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p className=\"centered\">No comments were added yet!</p>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={params.quoteId}\n          onAddedComment={addCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport { useEffect } from \"react\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\n\r\nconst QuoteDetail = () => {\r\n  const params = useParams();\r\n  const match = useRouteMatch();\r\n  const {sendRequest, status, data:loadedQuote, error} = useHttp(getSingleQuote, true);\r\n  useEffect(()=>{\r\n    sendRequest(params.quoteId);\r\n  },[sendRequest, params.quoteId]);\r\n\r\n  // const quote = loadedQuote.find((quote) => quote.id === params.quoteId);\r\n\r\n  if (status === 'pending'){\r\n    return (\r\n      <div className='centered'>\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <p className='centered'>{error}</p>;\r\n  }\r\n\r\n  if (!loadedQuote.text) {\r\n    return <p>No quote found!</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HighlightedQuote author={loadedQuote.author} text={loadedQuote.text} />\r\n      <Route path={match.path} exact>\r\n        <div className=\"centered\">\r\n          <Link to={`${match.url}/comments`} className='btn--flat'>Load Comments</Link>\r\n        </div>\r\n      </Route>\r\n      <Route path={`${match.path}/comments`}>\r\n        <Comments />\r\n      </Route>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}